import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { name, phone, contactMethods, additionalInfo } = body;


    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    const chatId = process.env.TELEGRAM_CHAT_ID;


    if (!botToken || !chatId) {
      return NextResponse.json(
        { error: 'Telegram bot configuration is missing' },
        { status: 500 }
      );
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const contactMethodsText = Array.isArray(contactMethods) 
      ? contactMethods.join(', ') 
      : contactMethods || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';

    const message = `
ü•ä *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ JAB Martial Arts*

üë§ *–ò–º—è:* ${name}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${phone}
üí¨ *–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ —Å–ø–æ—Å–æ–±—ã —Å–≤—è–∑–∏:* ${contactMethodsText}
üìù *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:* ${additionalInfo || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

‚è∞ *–í—Ä–µ–º—è:* ${new Date().toLocaleString('ru-RU')}
    `;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    const telegramResponse = await fetch(
      `https://api.telegram.org/bot${botToken}/sendMessage`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: 'Markdown',
        }),
      }
    );

    if (!telegramResponse.ok) {
      const errorData = await telegramResponse.json();
      return NextResponse.json(
        { error: 'Failed to send message to Telegram', details: errorData },
        { status: 500 }
      );
    }

    const telegramData = await telegramResponse.json();
    return NextResponse.json({ success: true });
  } catch (error) {
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
